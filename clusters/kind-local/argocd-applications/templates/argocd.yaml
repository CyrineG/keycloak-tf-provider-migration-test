# clusters/kind-local/argocd-applications/argocd.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: argocd
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://argoproj.github.io/argo-helm
    chart: argo-cd
    targetRevision: 8.3.0
    helm:
      # NOTE: Use 'values', not 'valuesObject'
      valuesObject:
        applicationSet:
          enabled: false

        configs:
          secret:
            # Create a simple bcrypt hashed password: "adminpassword"
            # Use: `htpasswd -nbBC 10 "" adminpassword | tr -d ':\n' | sed 's/$2y/$2a/'`
            argocdServerAdminPassword: "$2a$10$kTE6ZuwwbINBMwk1T4auHeidDyyrqZiC37dV1Bl3SQMAOCEAtdWla"
          cm:
            # for the oidc config i  wait till i first create argocd, then run tf script to populate the clients of it, then i can uncomment the oidc config
            oidc.config: |
              "name": "Keycloak"
              "clientID": "{{ .Values.keycloak.dev_realm.clients.argocd.clientId }}"
              "clientSecret": "{{ .Values.keycloak.dev_realm.clients.argocd.clientSecret }}"
              "issuer": "{{ .Values.keycloakDevRealmUrl }}"
              "requestedScopes":
              - "openid"
              - "profile"
              - "email"
            resource.exclusions: |
              - apiGroups:
                  - cilium.io
                kinds:
                  - CiliumIdentity
                clusters:
                  - "*"
            url: "http://argocd.local.dev:30000"
          params:
            server.insecure: true
          rbac:
            policy.csv: |
              g, readonly-dev, role:readonly
              g, admin-dev, role:admin
            # scopes: '[argocd_roles]' # This line is likely not needed if not using Dex. Can be removed.
        controller:
          metrics:
            enabled: true
          # Reduced to 1 replica for local cluster resource constraints
          replicas: 1
        dex:
          enabled: false
        global:
          hostAliases:
            - ip: 10.96.130.253    # Keycloak service ClusterIP
              hostnames:
                - "auth.local.dev"
          # Removed imagePullSecrets, topologySpreadConstraints, and other complex settings for local simplicity
          revisionHistoryLimit: 2
        notifications:
          enabled: false
        # CRITICAL FIX: Disable Redis HA for local cluster, else they can't all get scheduled
        redis-ha:
          enabled: false
        redis:
          enabled: true
        repoServer:
          # Simplified: Remove complex initContainer for initial test.
          # The helm-secrets setup can be added back in a later iteration.
          # Keeping it simple proves the TF migration works first.
          replicas: 1
        server:
          ingress:
            enabled: false
          replicas: 1
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
